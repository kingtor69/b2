#+STARTUP: overview

* Tube registers

| Host Addr | Read              | R Note | Write           | W Note |
|-----------+-------------------+--------+-----------------+--------|
| fee0      | A1 F1 P V M J I Q |        | S T P V M K I Q |        |
| fee1      | FIFO 1 p2h data   |        | FIFO 1 h2p data | 6      |
| fee2      | A2 F2 1 1 1 1 1 1 |        | -               |        |
| fee3      | FIFO 2 p2h data   |        | FIFO 2 h2p data |        |
| fee4      | A3 F3 1 1 1 1 1 1 |        | -               |        |
| fee5      | FIFO 3 p2h data   | 2      | FIFO 3 h2p data | 7      |
| fee6      | A4 F4 1 1 1 1 1 1 |        | -               |        |
| fee7      | FIFO 4 p2h data   | 4      | FIFO 4 h2p data | 9      |

| Par Addr | Read              | R Note | Write          | W Note |
|----------+-------------------+--------+----------------+--------|
| fef8     | A1 F1 P V M J I Q | 1      | -              |        |
| fef9     | FIFO1 h2p data    |        | FIFO1 p2h data |        |
| fefa     | A2 F2 1 1 1 1 1 1 |        | -              |        |
| fefb     | FIFO2 h2p data    |        | FIFO2 p2h data |        |
| fefc     | A3 F3 1 1 1 1 1 1 |        | -              |        |
| fefd     | FIFO3 h2p data    |  3     | FIFO3 p2h data |        |
| fefe     | A4 F4 1 1 1 1 1 1 |        | -              |        |
| feff     | FIFO4 h2p data    |  5     | FIFO4 p2h data |  10    |

HIRQ: Q=1, R4 p2h data available

PIRQ: I=1, R1 h2p data available
      J=1, R4 h2p data available

These two cases must be tracked independently, as the two status can
be reset independently.

PNMI: M=1, V=0, 1+ byte in R3 h2p
      M=1, V=1, 2 bytes in R3 h2p
      M=1, 0 bytes in R3 p2h

** TODO 1. Will clear PIRQ if register 1 was the source
** TODO 2. May activate PNMI depending on M and V flags
** TODO 3. May clear PNMI (see description of interrupt operation)
** TODO 4. Will clear HIRQ if it was active
** TODO 5. Will clear PIRQ if register 4 was the source
** TODO 6. Will activate PIRQ if I = 1
** TODO 7. May activate PNMI depending on M and V flags
** TODO 8. May clear PNMI
** TODO 9. Will activate PIRQ is J = 1
** TODO 10. Will activate HIRQ if Q = 1
* ADC registers

| nCS | nRD | nWR | (Access) | A1 | A0 | (Addr) | Mode         | Internal Function | Data I/O terminals     |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   1 |   - |   - | -        |  - |  - |        | Not selected |                   | High impedance         |
|   0 |   1 |   1 | -        |  - |  - |        | Not selected |                   | High impedance         |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   1 |   0 | write    |  0 |  0 |      0 | Write mode   | A/D start         | Input status           |
|     |     |     |          |    |    |        |              |                   | D1;D0 = MPX address    |
|     |     |     |          |    |    |        |              |                   | D2 = flag              |
|     |     |     |          |    |    |        |              |                   | D3 = 10-bit I/O if set |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   1 |   0 | write    |  0 |  1 |      1 | Not selected |                   | High impedance         |
|   0 |   1 |   0 | write    |  1 |  0 |      2 | Not selected |                   | High impedance         |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   1 |   0 | write    |  1 |  1 |      3 | Test mode    | Test status       |                        |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   0 |   1 | read     |  0 |  0 |      0 | Read mode    | Internal status   | D1;D0 = MPX            |
|     |     |     |          |    |    |        |              |                   | D2 = flag              |
|     |     |     |          |    |    |        |              |                   | D3 = 8/10              |
|     |     |     |          |    |    |        |              |                   | D5;D4 = MSBs           |
|     |     |     |          |    |    |        |              |                   | D6 = BUSY              |
|     |     |     |          |    |    |        |              |                   | D7 = ~EOC              |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   0 |   1 | read     |  0 |  1 |      1 | Read mode    | High data byte    |                        |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|
|   0 |   0 |   1 | read     |  1 |  0 |      2 | Read mode    | Low data byte     |                        |
|   0 |   0 |   1 | read     |  1 |  1 |      3 | Read mode    | Low data byte     |                        |
|-----+-----+-----+----------+----+----+--------+--------------+-------------------+------------------------|

* BeebThreadTimelineState

#+begin_src c++
  struct BeebThreadTimelineState {
      BeebThreadTimelineMode mode;  // y = ts.timeline_mode
      CycleCount begin_cycles;      // y } cycle range for event list...
      CycleCount end_cycles;        // y } ...see BeebThread::ThreadMain
      CycleCount current_cycles;    // = ts.num_executed_cycles
      size_t num_events;            // y needs tracking...
      size_t num_beeb_state_events; // y = ts.timeline_event_lists.size()
      bool can_record;              // y mode-dependent; see BeebThread::ThreadMain
      uint32_t clone_impediments;   // y see BeebThread::ThreadMain
  };
#+end_src

* Dock Fix Fallout

** DONE LEDs popup
CLOSED: [2023-12-19 Tue 23:58]
** DONE Messages popup
CLOSED: [2023-12-19 Tue 23:59]
** DONE ~ImGuiConsumePressedKeycode~
CLOSED: [2024-01-06 Sat 17:47]
** DONE Demo window
CLOSED: [2023-12-20 Wed 00:01]
** DONE Stored drawlists window
CLOSED: [2023-12-20 Wed 00:01]
** DONE Metrics window
CLOSED: [2023-12-20 Wed 00:01]
** DONE Beeb display size+borders
CLOSED: [2023-12-19 Tue 18:23]
** DONE Glitch when toggling texture filtering
CLOSED: [2023-12-19 Tue 19:28]

* test_AVFoundation

Convert video to .jpg files:

: ffmpeg -i "../IMG_1145.MOV" -q:v 2 %06d.jpg

Convert video to .wav file:

: ffmpeg -i "../IMG_1145.MOV" -f wav -vn test.wav

Command line options for test_AVFoundation:

#+begin_example
  --verbose -o /tmp/xyz.mov /Users/tom/tmp/video_test/frames
#+end_example

* Submodule notes

Where a submodule tracks a GitHub repo that's a fork, GitHub mostly
tracks the right source of the fork. Use the URL of the forked repo
(as shown on its GitHub repo page) as the ~upstream~ remote.

Because of the way submodules work, it's basically impossible to
remove one once it's been added, in case some historical revision
still uses it. So not all of them are actually used by the head
revision, but... hopefully... if you were to check out every single
revision of the repo, you'd find that every one was used at at least
one point.

Other submodule-specific notes:

** ~imgui~

This is a fork of the upstream repo, docking branch.

(For a long while it did track somebody else's fork
(https://github.com/Flix01/imgui/), which included some docking UI
functionality, but this appears to have been abandoned.

** ~SDL~

Unused submodule.

Fork of old mirror of SDL, plus a patch for rendering API-agnostic
triangle drawing. See https://github.com/libsdl-org/SDL/issues/772

SDL then moved to GitHub, and its official repo turned out not to be
mergeable with this one.

** ~SDL_official~ (https://github.com/tom-seddon/SDL-1)

Fork of the official SDL repo.

* Turbo disc (RIP)

After 1770 sets DRQ, wait for CPU to read/write data register. Once
read/written, wait for CPU to execute next RTI. Then go to the next
byte straight away. Also: reduce settle and seek times. (Don't omit
the inter-sector delay, as Watford DDFS needs it.)

This involved a bunch of code in a bunch of places, and ended up a
special case, being a runtime toggle (that affected reproducibility)
rather than part of the BeebConfig. And I never tested it enough to
promote it.

It could return, but probably won't... there are better ways of
providing fast file access, that b2 should probably support instead -
BeebLink (etc.), B-em's VDFS (etc.), (if you want ADFS) some kind of
hard disc emulation, and so on.

* Debugger paging override syntax

When providing an address, by default the debugger accesses whichever
byte of memory is paged in at the time. If you access address 8003,
for example, you could get any one of 16 paged ROMs, or (on B+/Master)
some of the extra RAM, depending on the value of ROMSEL.

If you want to refer to a particular byte, unambiguously, you can use
the paging override syntax. This consists of a prefix, specifying
which bits of paged memory are paged in, then a ~.~, then the address.
For example, ~5.8003~, to refer to address 8003 in ROM bank 5.

The available prefixes are as follows:

- ~0~, ~1~, ~2~, ~3~, ~4~, ~5~, ~6~, ~7~, ~8~, ~9~, ~a~, ~b~, ~c~, ~d~, ~e~, ~f~,  - the given ROM bank
- ~n~ - ANDY (Master), extra 12K RAM (B+)
- ~m~, ~s~ - main RAM or shadow RAM
- ~h~ - HAZEL (Master)
- ~i~ - I/O area (only useful on Master)
- ~o~ - OS

prefix precedence? overlapping areas??

** B

| Address   | What                                                                         |
|-----------+------------------------------------------------------------------------------|
| 0000-7fff | always main RAM                                                              |
| 8000-bfff | current paged ROM as per ROMSEL, or ~0123456789abcdef~ for specific ROM bank |
| c000-fbff | always OS                                                                    |
| fc00-feff | I/O area, or ~o~ for OS (not terribly useful)                                |
| ff00-ffff | always OS                                                                    |

** B+

| Address   | What                                                                                                             |
|-----------+------------------------------------------------------------------------------------------------------------------|
| 0000-2fff | always main RAM                                                                                                  |
| 3000-7fff | shadow/main RAM as per bit 7 of ACCON, or ~m~ for main RAM, or ~s~ for shadow RAM                                |
| 8000-afff | current paged ROM/extra RAM as per ROMSEL, or ~0123456789abcdef~ for specific ROM bank, or ~n~ for 12K extra RAM |
| b000-bfff | current paged ROM as per ROMSEL, or ~0123456789abcdef~ for specific ROM bank                                     |
| c000-fbff | always OS                                                                                                        |
| fc00-feff | I/O area, or ~o~ for OS (not terribly useful)                                                                    |
| ff00-ffff | always OS                                                                                                        |

Notes:

- ~n~ is for aNdy, which is what the RAM at 8000 is called on the Master

** Master

| Address   | What                                                                                               |
|-----------+----------------------------------------------------------------------------------------------------|
| 0000-2fff | always main RAM                                                                                    |
| 3000-7fff | shadow/main RAM as per bit 2 of ACCCON, or ~m~ for main RAM, or ~s~ for shadow RAM                 |
| 8000-8fff | current paged ROM/ANDY as per ROMSEL, or ~0123456789abcdef~ for specific ROM bank, or ~n~ for ANDY |
| 9000-bfff | current paged ROM as per ROMSEL, or ~0123456789abcdef~ for specific ROM bank                       |
| c000-dfff | OS or HAZEL as per bit 3 of ACCCON, or ~o~ for OS, or ~h~ for HAZEL                                |
| e000-fbff | always OS                                                                                          |
| fc00-feff | OS or I/O area as per bit 6 of ACCCON, or ~i~ for I/O, or ~o~ for OS                               |
| ff00-ffff | always OS                                                                                          |

* agh

#+begin_example
1948227  m`$4438: dec $fe65 [i`$fe65]      A=01 X=04 Y=00 S=fd P=Nvdizc (D=fe)
1948227  read $ce from $4438
1948228  CPU state before: tfn=T0_All t0fn=T0_RMW_ABS
1948228  CPU state after: tfn=T1_RMW_ABS ifn=DEC, abus=$4439, dbus=$ce
1948228  read $65 from $4439
1948229  CPU state before: tfn=T1_RMW_ABS ifn=DEC
1948229  CPU state after: tfn=T2_RMW_ABS ifn=DEC, abus=$443a, dbus=$65
1948229  read $fe from $443a
1948229  UserVIA - T1 timeout
1948230  CPU state before: tfn=T2_RMW_ABS ifn=DEC
1948230  CPU state after: tfn=T3_RMW_ABS ifn=DEC, abus=$fe65, dbus=$fe
1948230  Stretch #1
1948230  UserVIA - T1 IRQ. Continuous=false PB7=false
1948231  read $ff from $fe65
1948231  UserVIA - T1 reload: T1=$0004 (4)
1948232  CPU state before: tfn=T3_RMW_ABS ifn=DEC
1948232  CPU state after: tfn=T4_RMW_ABS ifn=DEC, abus=$fe65, dbus=$ff
1948232  Stretch #1
1948233  write $ff to $fe65
1948233  UserVIA - T1C-H write acknowledges T1 (IFR=$00)
1948233  UserVIA - T1 reload: T1=$ff04 (65284)
1948234  CPU state before: tfn=T4_RMW_ABS ifn=DEC
1948234  CPU state after: tfn=T5_RMW_ABS ifn=DEC, abus=$fe65, dbus=$fe

1948234  Checked for interrupts <---- this should happen just before the previous write!

1948234  Stretch #1
1948235  write $fe to $fe65
1948235  UserVIA - T1C-H write acknowledges T1 (IFR=$00)
1948235  UserVIA - T1 reload: T1=$fe04 (65028)
1948236  CPU state before: tfn=T5_RMW_ABS ifn=DEC
1948236  CPU state after: tfn=T0_All t0fn=?, abus=$443b, dbus=$fe
1948236  m`$443b: lda $1001 [m`$1001]      A=00 X=04 Y=00 S=fd P=nvdiZc (D=00)
1948236  read $ad from $443b
#+end_example

* Emacs setup

~.dir-locals.el~:

#+begin_example
((nil . ((compile-command . "cd ~/b2/ && make tom_emacs"))))
#+end_example

* config versioning notes

Tag each default config with a feature name, a string

When saving: save off features seen in all configs

When loading: any default configs with an unseen feature are added to
the list. And the cycle repeats.

Configs predating the feature mechanism - i.e., the stock B/B+/M128
set - are marked by having an empty feature name., They never get
re-added.

* notes about why stuff is in one of ~BBCMicro~ or ~BeebThread~ rather than the other 

Saved states/rewind/timeline/etc. is supposed to be at heart managed
by copying ~BBCMicro~ objects. So anything that affects
reproducibility has to be part of that. Hence pasting state being in
~BBCMicro~.

But ~BBCMicro~ should also have no more functionality in it than
necessary, so which is why the trace stuff is just start/stop on the
BBCMicro class and then a pile of junk in BeebThread to handle the
various start and stop conditions.

Would be nice to get the instruction/write callbacks out of BBCMicro
too, since in theory the BeebThread could do that bit. But having them
there does mean they can be easily stripped out of the templated
Update functions via ~if constexpr~, meaning no overhead when not
updating.

Could maybe template the BeebThread update function, along similar
lines? The stretch flag complicates that a bit, though.

* Compact EEPROM stuff

f`$82d9: - print "Options reset"

bra resetCMOSRAM:

H     2475011  f`$8279: bra  $82bb               00 00 00 ff nvdIZc (01)

powerOnReset:

H     2463066  f`$8264: ldx  #$ff                00 ff 0f ff NvdIzc (ff)

#+begin_example
605	.8264					powerOnReset:
607	.8264	a2 ff		ldx #$ff	                ldx #$ff
608	.8266	20 3a 9f	jsr $9f3a	                jsr i2cReadEEPROMByte
609	.8269	b0 10		bcs $827b	                bcs checkForNVRAMReset

C=0, so branch not taken. Read succeeded, at least.

Y=$00

610	.826b	98		tya		                tya

A=$00

611	.826c	29 7f		and #$7f	                and #$7f

A=$00

615	.826e	c9 30		cmp #$30	                cmp #$30

Nope...

617	.8270	f0 09		beq $827b	                beq checkForNVRAMReset

It is done.

618	.8272	a2 00		ldx #$00	                ldx #0
619	.8274	a0 00		ldy #$00	                ldy #0
620	.8276	20 09 9f	jsr $9f09	                jsr L9E99
621	.8279	80 40		bra $82bb	                bra resetCMOSRAM
#+end_example

* Olivetti PC 128 S

Default CMOS:

#+begin_example
  [0]	0 '\0'	unsigned char
  [1]	254 'þ'	unsigned char
  [2]	0 '\0'	unsigned char
  [3]	235 'ë'	unsigned char
  [4]	0 '\0'	unsigned char
  [5]	237 'í'	unsigned char
  [6]	255 'ÿ'	unsigned char
  [7]	255 'ÿ'	unsigned char
  [8]	0 '\0'	unsigned char
  [9]	0 '\0'	unsigned char
  [10]	249 'ù'	unsigned char
  [11]	227 'ã'	unsigned char
  [12]	32 ' '	unsigned char
  [13]	8 '\b'	unsigned char
  [14]	10 '\n'	unsigned char
  [15]	44 ','	unsigned char
  [16]	128 '€'	unsigned char
  [17]	0 '\0'	unsigned char
  [18]	3 '\x3'	unsigned char
  [19]	4 '\x4'	unsigned char
  [20]	0 '\0'	unsigned char
  [21]	0 '\0'	unsigned char
  [22]	0 '\0'	unsigned char
  [23]	0 '\0'	unsigned char
  [24]	0 '\0'	unsigned char
  [25]	0 '\0'	unsigned char
  [26]	0 '\0'	unsigned char
  [27]	0 '\0'	unsigned char
  [28]	0 '\0'	unsigned char
  [29]	0 '\0'	unsigned char
  [30]	0 '\0'	unsigned char
  [31]	0 '\0'	unsigned char
  [32]	0 '\0'	unsigned char
  [33]	0 '\0'	unsigned char
  [34]	0 '\0'	unsigned char
  [35]	0 '\0'	unsigned char
  [36]	0 '\0'	unsigned char
  [37]	0 '\0'	unsigned char
  [38]	0 '\0'	unsigned char
  [39]	0 '\0'	unsigned char
  [40]	0 '\0'	unsigned char
  [41]	0 '\0'	unsigned char
  [42]	0 '\0'	unsigned char
  [43]	0 '\0'	unsigned char
  [44]	0 '\0'	unsigned char
  [45]	0 '\0'	unsigned char
  [46]	0 '\0'	unsigned char
  [47]	0 '\0'	unsigned char
  [48]	0 '\0'	unsigned char
  [49]	0 '\0'	unsigned char
  [50]	0 '\0'	unsigned char
  [51]	0 '\0'	unsigned char
  [52]	0 '\0'	unsigned char
  [53]	0 '\0'	unsigned char
  [54]	0 '\0'	unsigned char
  [55]	0 '\0'	unsigned char
  [56]	0 '\0'	unsigned char
  [57]	0 '\0'	unsigned char
  [58]	0 '\0'	unsigned char
  [59]	0 '\0'	unsigned char
  [60]	0 '\0'	unsigned char
  [61]	0 '\0'	unsigned char
  [62]	0 '\0'	unsigned char
  [63]	0 '\0'	unsigned char
  [64]	0 '\0'	unsigned char
  [65]	0 '\0'	unsigned char
  [66]	0 '\0'	unsigned char
  [67]	0 '\0'	unsigned char
  [68]	0 '\0'	unsigned char
  [69]	0 '\0'	unsigned char
  [70]	0 '\0'	unsigned char
  [71]	0 '\0'	unsigned char
  [72]	0 '\0'	unsigned char
  [73]	0 '\0'	unsigned char
  [74]	0 '\0'	unsigned char
  [75]	0 '\0'	unsigned char
  [76]	0 '\0'	unsigned char
  [77]	0 '\0'	unsigned char
  [78]	0 '\0'	unsigned char
  [79]	0 '\0'	unsigned char
  [80]	0 '\0'	unsigned char
  [81]	0 '\0'	unsigned char
  [82]	0 '\0'	unsigned char
  [83]	0 '\0'	unsigned char
  [84]	0 '\0'	unsigned char
  [85]	0 '\0'	unsigned char
  [86]	0 '\0'	unsigned char
  [87]	0 '\0'	unsigned char
  [88]	0 '\0'	unsigned char
  [89]	0 '\0'	unsigned char
  [90]	0 '\0'	unsigned char
  [91]	0 '\0'	unsigned char
  [92]	0 '\0'	unsigned char
  [93]	0 '\0'	unsigned char
  [94]	0 '\0'	unsigned char
  [95]	0 '\0'	unsigned char
  [96]	0 '\0'	unsigned char
  [97]	0 '\0'	unsigned char
  [98]	0 '\0'	unsigned char
  [99]	0 '\0'	unsigned char
  [100]	0 '\0'	unsigned char
  [101]	0 '\0'	unsigned char
  [102]	0 '\0'	unsigned char
  [103]	0 '\0'	unsigned char
  [104]	0 '\0'	unsigned char
  [105]	0 '\0'	unsigned char
  [106]	0 '\0'	unsigned char
  [107]	0 '\0'	unsigned char
  [108]	0 '\0'	unsigned char
  [109]	0 '\0'	unsigned char
  [110]	0 '\0'	unsigned char
  [111]	0 '\0'	unsigned char
  [112]	0 '\0'	unsigned char
  [113]	0 '\0'	unsigned char
  [114]	0 '\0'	unsigned char
  [115]	0 '\0'	unsigned char
  [116]	0 '\0'	unsigned char
  [117]	0 '\0'	unsigned char
  [118]	0 '\0'	unsigned char
  [119]	0 '\0'	unsigned char
  [120]	0 '\0'	unsigned char
  [121]	0 '\0'	unsigned char
  [122]	0 '\0'	unsigned char
  [123]	0 '\0'	unsigned char
  [124]	0 '\0'	unsigned char
  [125]	0 '\0'	unsigned char
  [126]	0 '\0'	unsigned char
  [127]	50 '2'	unsigned char
#+end_example
